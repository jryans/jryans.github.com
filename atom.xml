<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[J. Ryan Stinnett]]></title>
  <link href="https://convolv.es/atom.xml" rel="self"/>
  <link href="https://convolv.es/"/>
  <updated>2019-07-20T18:50:06+01:00</updated>
  <id>https://convolv.es/</id>
  <author>
    <name><![CDATA[J. Ryan Stinnett]]></name>
    
  </author>
  <icon>https://secure.gravatar.com/avatar/da74cfd81f892e34f7e3926f2c56f908?s=32</icon>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building Firefox for Linux 32-bit]]></title>
    <link href="https://convolv.es/blog/2017/08/25/building-firefox-for-linux-32-bit/"/>
    <updated>2017-08-25T19:33:00+01:00</updated>
    <id>https://convolv.es/blog/2017/08/25/building-firefox-for-linux-32-bit</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>As part of my work on the Stylo / Quantum CSS team at Mozilla, I needed to be
able to test changes to Firefox that only affect Linux 32-bit builds. These
days, I believe you essentially have to use a 64-bit host to build Firefox to
avoid OOM issues during linking and potentially other steps, so this means
some form of cross-compiling from a Linux 64-bit host to a Linux 32-bit
target.</p>

<p>I already had a Linux 64-bit machine running Ubuntu 16.04 LTS, so I set about
attempting to make it build Firefox targeting Linux 32-bit.</p>

<p>I should note that I only use Linux occasionally at the moment, so there could
certainly be a better solution than the one I describe.  Also, I recreated these
steps after the fact, so I might have missed something.  Please let me know in
the comments.</p>

<p>This article assumes you are already set up to build Firefox when targeting
64-bit.</p>

<h2>Multiarch Packages (Or: How It&#8217;s Supposed to Work)</h2>

<p>Recent versions of Debian and Ubuntu support the concept of
<a href="https://wiki.debian.org/Multiarch">&#8220;multiarch packages&#8221;</a> which are intended to allow installing multiple
architectures together to support use cases including&#8230; cross-compiling!
Great, sounds like just the thing we need.</p>

<p>We should be able to install<sup id="a1"><a href="#f1">1</a></sup> the
<a href="http://searchfox.org/mozilla-central/rev/48ea452803907f2575d81021e8678634e8067fc2/python/mozboot/mozboot/debian.py#50-61">core Gecko development dependencies</a> with an extra <code>:i386</code> suffix to get
the 32-bit version on our 64-bit host:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(host) $ sudo apt install libasound2-dev:i386 libcurl4-openssl-dev:i386 libdbus-1-dev:i386 libdbus-glib-1-dev:i386 libgconf2-dev:i386 libgtk-3-dev:i386 libgtk2.0-dev:i386 libiw-dev:i386 libnotify-dev:i386 libpulse-dev:i386 libx11-xcb-dev:i386 libxt-dev:i386 mesa-common-dev:i386
</span><span class='line'>Reading package lists... Done
</span><span class='line'>Building dependency tree
</span><span class='line'>Reading state information... Done
</span><span class='line'>Some packages could not be installed. This may mean that you have
</span><span class='line'>requested an impossible situation or if you are using the unstable
</span><span class='line'>distribution that some required packages have not yet been created
</span><span class='line'>or been moved out of Incoming.
</span><span class='line'>The following information may help to resolve the situation:
</span><span class='line'>
</span><span class='line'>The following packages have unmet dependencies:
</span><span class='line'> libgtk-3-dev:i386 : Depends: gir1.2-gtk-3.0:i386 (= 3.18.9-1ubuntu3.3) but it is not going to be installed
</span><span class='line'>                     Depends: libatk1.0-dev:i386 (&gt;= 2.15.1) but it is not going to be installed
</span><span class='line'>                     Depends: libatk-bridge2.0-dev:i386 but it is not going to be installed
</span><span class='line'>                     Depends: libegl1-mesa-dev:i386 but it is not going to be installed
</span><span class='line'>                     Depends: libxkbcommon-dev:i386 but it is not going to be installed
</span><span class='line'>                     Depends: libmirclient-dev:i386 (&gt;= 0.13.3) but it is not going to be installed
</span><span class='line'> libgtk2.0-dev:i386 : Depends: gir1.2-gtk-2.0:i386 (= 2.24.30-1ubuntu1.16.04.2) but it is not going to be installed
</span><span class='line'>                      Depends: libatk1.0-dev:i386 (&gt;= 1.29.2) but it is not going to be installed
</span><span class='line'>                      Recommends: python:i386 (&gt;= 2.4) but it is not going to be installed
</span><span class='line'> libnotify-dev:i386 : Depends: gir1.2-notify-0.7:i386 (= 0.7.6-2svn1) but it is not going to be installed
</span><span class='line'>E: Unable to correct problems, you have held broken packages.</span></code></pre></td></tr></table></div></figure>


<p>Well, that doesn&#8217;t look good.  It appears some of the Gecko libraries we need
aren&#8217;t happy about being installed for multiple architectures.</p>

<h2>Switch Approaches to <code>chroot</code></h2>

<p>Since multiarch packages don&#8217;t appear to be working here, I looked around for
other approaches.  Ideally, I would have something fairly self-contained so that
it would be easy to remove when I no longer need 32-bit support.</p>

<p>One approach to multiple architectures that has been around for a while is to
create a <a href="https://en.wikipedia.org/wiki/Chroot">chroot</a> environment: effectively, a separate installation of
Linux for a different architecture.  A utility like <code>schroot</code> can then be used
to issue the <code>chroot(2)</code> system call which makes the current session believe
this sub-installation is the root filesystem.</p>

<p>Let&#8217;s grab <code>schroot</code> so we&#8217;ll be able to enter the chroot once it&#8217;s set up:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(host) $ sudo apt install schroot</span></code></pre></td></tr></table></div></figure>


<p>There are several different <a href="http://manpages.ubuntu.com/manpages/xenial/man5/schroot.conf.5.html">types of chroots</a> you can use with <code>schroot</code>.
We&#8217;ll use the <code>directory</code> type, as it&#8217;s the simplest to understand (just another
directory on the existing filesystem), and it will make it simpler to expose a
few things to the host later on.</p>

<p>You can place the directory wherever, but some existing filesystems are mapped
into the chroot for convenience, so avoiding <code>/home</code> is probably a good idea.  I
went with <code>/var/chroot/linux32</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(host) $ sudo mkdir -p /var/chroot/linux32</span></code></pre></td></tr></table></div></figure>


<p>We need to update <code>schroot.conf</code> to configure the new chroot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(host) $ sudo cat &lt;&lt; EOF &gt;&gt; /etc/schroot/schroot.conf
</span><span class='line'>[linux32]
</span><span class='line'>description=Linux32 build environment
</span><span class='line'>aliases=default
</span><span class='line'>type=directory
</span><span class='line'>directory=/var/chroot/linux32
</span><span class='line'>personality=linux32
</span><span class='line'>profile=desktop
</span><span class='line'>users=jryans
</span><span class='line'>root-users=jryans
</span><span class='line'>EOF</span></code></pre></td></tr></table></div></figure>


<p>In particular, <code>personality</code> is important to set for this multi-arch use case.
(Make sure to replace the user names with your own!)</p>

<p>Firefox will want access to shared memory as well, so we&#8217;ll need to add that to
the set of mapped filesystems in the chroot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(host) $ sudo cat &lt;&lt; EOF &gt;&gt; /etc/schroot/desktop/fstab
</span><span class='line'>/dev/shm       /dev/shm        none    rw,bind         0       0
</span><span class='line'>EOF</span></code></pre></td></tr></table></div></figure>


<p>Now we need to <a href="https://help.ubuntu.com/community/DebootstrapChroot">install the 32-bit system</a> inside the chroot.  We can do
that with a utility called <code>debootstrap</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(host) $ sudo apt install debootstrap
</span><span class='line'>(host) $ sudo debootstrap --variant=buildd --arch=i386 --foreign xenial /var/chroot/linux32 http://archive.ubuntu.com/ubuntu</span></code></pre></td></tr></table></div></figure>


<p>This will fetch all the packages for a 32-bit installation and place them in the
chroot.  For a cross-arch bootstrap, we need to add <code>--foreign</code> to skip the
unpacking step, which we will do momentarily from inside the chroot.
<code>--variant=buildd</code> will help us out a bit by including common build tools.</p>

<p>To finish installation, we have to enter the chroot.  You can enter the chroot
with <code>schroot</code> and it remains active until you <code>exit</code>.  Any snippets that say
<code>(chroot)</code> instead of <code>(host)</code> are meant to be run inside the chroot.</p>

<p>So, inside the chroot, run the second stage of <code>debootstrap</code> to actually unpack
everything:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(chroot) $ /debootstrap/debootstrap --second-stage</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s double-check that things are working like we expect:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(chroot) $ arch
</span><span class='line'>i686</span></code></pre></td></tr></table></div></figure>


<p>Great, we&#8217;re getting closer!</p>

<h2>Install packages</h2>

<p>Now that we have a basic 32-bit installation, let&#8217;s install the packages we need
for development.  The <code>apt</code> source list inside the chroot is pretty bare bones,
so we&#8217;ll want to expand it a bit to reach everything we need:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(chroot) $ sudo cat &lt;&lt; EOF &gt; /etc/apt/sources.list
</span><span class='line'>deb http://archive.ubuntu.com/ubuntu xenial main universe
</span><span class='line'>deb http://archive.ubuntu.com/ubuntu xenial-updates main universe
</span><span class='line'>EOF
</span><span class='line'>(chroot) $ sudo apt update</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s grab the same packages from before (without <code>:i386</code> since that&#8217;s the
default inside the chroot):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(chroot) $ sudo apt install libasound2-dev libcurl4-openssl-dev libdbus-1-dev libdbus-glib-1-dev libgconf2-dev libgtk-3-dev libgtk2.0-dev libiw-dev libnotify-dev libpulse-dev libx11-xcb-dev libxt-dev mesa-common-dev python-dbus xvfb yasm</span></code></pre></td></tr></table></div></figure>


<p>You may need to install the 32-bit version of your graphics card&#8217;s GL library to
get reasonable graphics output when running in the 32-bit environment.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(chroot) $ sudo apt install nvidia-384</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ll also want to have access to the X display inside the chroot.  The simple
way to achieve this is to disable X security in the host and expose the same
display in the chroot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(host) $ xhost +
</span><span class='line'>(chroot) $ export DISPLAY=:0</span></code></pre></td></tr></table></div></figure>


<p>We can verify that we have accelerated graphics:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(chroot) $ sudo apt install mesa-utils
</span><span class='line'>(chroot) $ glxinfo | grep renderer
</span><span class='line'>OpenGL renderer string: GeForce GTX 1080/PCIe/SSE2</span></code></pre></td></tr></table></div></figure>


<h2>Building Firefox</h2>

<p>In order for the host to build Firefox for the 32-bit target, it needs to access
various 32-bit libraries and include files.  We already have these installed in
the chroot, so let&#8217;s cheat and expose them to the host via symlinks into the
chroot&#8217;s file structure:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(host) $ sudo ln -s /var/chroot/linux32/lib/i386-linux-gnu /lib/
</span><span class='line'>(host) $ sudo ln -s /var/chroot/linux32/usr/lib/i386-linux-gnu /usr/lib/
</span><span class='line'>(host) $ sudo ln -s /var/chroot/linux32/usr/include/i386-linux-gnu /usr/include/</span></code></pre></td></tr></table></div></figure>


<p>We also need Rust to be able to target 32-bit from the host, so let&#8217;s install
support for that:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(host) $ rustup target add i686-unknown-linux-gnu</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ll need a specialized <code>.mozconfig</code> for Firefox to target 32-bit.  Something
like the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(host) $ cat &lt;&lt; EOF &gt; ~/projects/gecko/.mozconfig
</span><span class='line'>export PKG_CONFIG_PATH="/var/chroot/linux32/usr/lib/i386-linux-gnu/pkgconfig:/var/chroot/linux32/usr/share/pkgconfig"
</span><span class='line'>export MOZ_LINUX_32_SSE2_STARTUP_ERROR=1
</span><span class='line'>CFLAGS="$CFLAGS -msse -msse2 -mfpmath=sse"
</span><span class='line'>CXXFLAGS="$CXXFLAGS -msse -msse2 -mfpmath=sse"
</span><span class='line'>if test `uname -m` = "x86_64"; then
</span><span class='line'>  CFLAGS="$CFLAGS -m32 -march=pentium-m"
</span><span class='line'>  CXXFLAGS="$CXXFLAGS -m32 -march=pentium-m"
</span><span class='line'>  ac_add_options --target=i686-pc-linux
</span><span class='line'>  ac_add_options --host=i686-pc-linux
</span><span class='line'>  ac_add_options --x-libraries=/usr/lib
</span><span class='line'>fi
</span><span class='line'>EOF</span></code></pre></td></tr></table></div></figure>


<p>This was <a href="http://searchfox.org/mozilla-central/rev/89e125b817c5d493babbc58ea526be970bd3748e/build/unix/mozconfig.linux32">adapted</a> from the <code>mozconfig.linux32</code> used for official 32-bit
builds.  I modified the <code>PKG_CONFIG_PATH</code> to point at more 32-bit files
installed inside the chroot, similar to the library and include changes above.</p>

<p>Now, we should be able to build successfully:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(host) $ ./mach build</span></code></pre></td></tr></table></div></figure>


<p>Then, from the chroot, you can run Firefox and other tests:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(chroot) $ ./mach run</span></code></pre></td></tr></table></div></figure>


<p><img src="https://convolv.es/images/posts/firefox-linux32.png" alt="Firefox running on Linux 32-bit" /></p>

<h2>Footnotes</h2>

<p><b id="f1">1.</b> It&#8217;s commonly suggested that people should use <code>./mach
bootstrap</code> to install the Firefox build dependencies, so feel free to try that
if you wish.  I dislike scripts that install system packages, so I&#8217;ve done it
manually here.  The bootstrap script would likely need various adjustments to
support this use case. <a href="#a1">↩</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WiFi Debugging for Firefox for Android]]></title>
    <link href="https://convolv.es/blog/2015/08/05/wifi-debug-fennec/"/>
    <updated>2015-08-05T15:33:00+01:00</updated>
    <id>https://convolv.es/blog/2015/08/05/wifi-debug-fennec</id>
    <content type="html"><![CDATA[<p>I am excited to announce that we&#8217;re now <a href="https://bugzil.la/1180996">shipping</a> WiFi debugging for
Firefox for Android!  It&#8217;s available in <a href="https://nightly.mozilla.org/">Firefox for Android 42</a>
with <a href="https://nightly.mozilla.org/">Firefox Nightly</a> on desktop.</p>

<p>The rest of this post will sound quite similar to the <a href="https://convolv.es/blog/2015/03/25/wifi-debug-fxos/">previous announcement for
Firefox OS</a> support.</p>

<p>WiFi debugging allows <a href="https://developer.mozilla.org/docs/Tools/WebIDE">WebIDE</a> to connect to Firefox for Android via
your local WiFi network instead of a USB cable.</p>

<p>The connection experience is generally more straightforward (especially after
connecting to a device the first time) than with USB and also more convenient to
use since you&#8217;re no longer tied down by a cable.</p>

<h2>Security</h2>

<p>A large portion of this project has gone towards making the debugging
connection secure, so that you can use it safely on shared network, such as an
office or coffee shop.</p>

<p>We use TLS for encryption and authentication.  The computer and device both
create self-signed certificates.  When you connect, a QR code is scanned to
verify that the certificates can be trusted.  During the connection process, you
can choose to remember this information and connect immediately in the future if
desired.</p>

<h2>How to Use</h2>

<p>You&#8217;ll need to assemble the following bits and bobs:</p>

<ul>
<li><a href="https://nightly.mozilla.org/">Firefox 42</a></li>
<li><a href="https://nightly.mozilla.org/">Firefox for Android 42</a></li>
<li><a href="https://play.google.com/store/apps/details?id=com.google.zxing.client.android">Barcode Scanner Android app by ZXing Team</a> (for QR code scanning)</li>
</ul>


<p>On your Android device:</p>

<ol>
<li>Install the <a href="https://play.google.com/store/apps/details?id=com.google.zxing.client.android">Barcode Scanner Android app by ZXing Team</a></li>
<li>Open Firefox for Android</li>
<li>Go to Developer Tools Settings on device (Settings -> Developer Tools)</li>
<li>Enable Remote Debugging via Wi-Fi</li>
</ol>


<p><img src="https://convolv.es/images/posts/fennec-wifi-opts.png" alt="Firefox for Android WiFi Debugging Options" /></p>

<p>To connect from Firefox Desktop:</p>

<ol>
<li>Open WebIDE in Firefox Nightly (Tools -> Web Developer -> WebIDE)</li>
<li>Click &#8220;Select Runtime&#8221; to open the runtimes panel</li>
<li>Your Firefox for Android device should show up in the &#8220;WiFi Devices&#8221; section</li>
<li>A connection prompt will appear on device, choose &#8220;Scan&#8221; or &#8220;Scan and Remember&#8221;</li>
<li>Scan the QR code displayed in WebIDE</li>
</ol>


<p><img src="https://convolv.es/images/posts/webide-wifi-runtime.png" alt="WebIDE WiFi Runtimes" />
<img src="https://convolv.es/images/posts/webide-qr-code.png" alt="WebIDE Displays the QR Code" /></p>

<p>After scanning the QR code, the QR display should disappear and the &#8220;device&#8221;
icon in WebIDE will turn blue for &#8220;connected&#8221;.</p>

<p>You can then access all of your remote browser tabs just as you can today over
USB.</p>

<h2>Technical Aside</h2>

<p>This process does not use ADB at all on the device, so if you find ADB
inconvenient while debugging or would rather not install ADB at all, then
WiFi debugging is the way to go.</p>

<p>By skipping ADB, we don&#8217;t have to worry about driver confusion, especially on
Windows and Linux.</p>

<h2>Supported Devices</h2>

<p>This feature should be supported on any Firefox for Android device.  So far,
I&#8217;ve tested it on the LG G2.</p>

<h2>Acknowledgments</h2>

<p>Thanks to all who helped via advice and reviews while working on Android support,
including (in semi-random order):</p>

<ul>
<li>Margaret Leibovic</li>
<li>Karim Benhmida</li>
</ul>


<p>And from the larger WiFi debugging effort:</p>

<ul>
<li>Brian Warner</li>
<li>Trevor Perrin</li>
<li>David Keeler</li>
<li>Honza Bambas</li>
<li>Patrick McManus</li>
<li>Jason Duell</li>
<li>Panos Astithas</li>
<li>Jan Keromnes</li>
<li>Alexandre Poirot</li>
<li>Paul Rouget</li>
<li>Paul Theriault</li>
</ul>


<p>I am probably forgetting others as well, so I apologize if you were omitted.</p>

<h2>What&#8217;s Next</h2>

<p>If there are features you&#8217;d like to see added, <a href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Firefox&amp;component=Developer%20Tools%3A%20WebIDE">file bugs</a> or contact the
team via <a href="https://wiki.mozilla.org/DevTools/GetInvolved#Communication">various channels</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WiFi Debugging for Firefox OS]]></title>
    <link href="https://convolv.es/blog/2015/03/25/wifi-debug-fxos/"/>
    <updated>2015-03-25T08:51:00+00:00</updated>
    <id>https://convolv.es/blog/2015/03/25/wifi-debug-fxos</id>
    <content type="html"><![CDATA[<p>I am excited to announce that we&#8217;re now shipping WiFi debugging for Firefox OS!
It&#8217;s available in <a href="https://developer.mozilla.org/en-US/Firefox_OS/Building">Firefox OS 3.0 / master</a> with <a href="https://nightly.mozilla.org/">Firefox Nightly</a> on desktop.</p>

<p>WiFi debugging allows <a href="https://developer.mozilla.org/docs/Tools/WebIDE">WebIDE</a> to connect to your Firefox OS device via your local
WiFi network instead of a USB cable.</p>

<p>The connection experience is generally more straightforward (especially after
connecting to a device the first time) than with USB and also more convenient to
use since you&#8217;re no longer tied down by a cable.</p>

<h2>Security</h2>

<p>A large portion of this project has gone towards making the debugging
connection secure, so that you can use it safely on shared network, such as an
office or coffee shop.</p>

<p>We use TLS for encryption and authentication.  The computer and device both
create self-signed certificates.  When you connect, a QR code is scanned to
verify that the certificates can be trusted.  During the connection process, you
can choose to remember this information and connect immediately in the future if
desired.</p>

<h2>How to Use</h2>

<p>You&#8217;ll need to assemble the following bits and bobs:</p>

<ul>
<li><a href="https://nightly.mozilla.org/">Firefox 39</a> (2015-03-27 or later)</li>
<li>Firefox OS 3.0 (2015-03-27 or later)

<ul>
<li>Option A: <a href="https://developer.mozilla.org/en-US/Firefox_OS/Phone_guide/Flame/Updating_your_Flame#Updating_your_Flame_to_a_nightly_build">Update your Flame</a> to 3.0 / master</li>
<li>Option B: <a href="https://developer.mozilla.org/en-US/Firefox_OS/Building">Build for your device</a> from source</li>
</ul>
</li>
</ul>


<p>On Firefox OS, enable WiFi debugging:</p>

<ol>
<li>Go to Developer Settings on device (Settings -> Developer)</li>
<li>Enable DevTools via Wi-Fi</li>
<li>Edit the device name if desired</li>
</ol>


<p><img src="https://convolv.es/images/posts/fxos-wifi-opts.png" alt="Firefox OS WiFi Debugging Options" /></p>

<p>To connect from Firefox Desktop:</p>

<ol>
<li>Open WebIDE in Firefox Nightly (Tools -> Web Developer -> WebIDE)</li>
<li>Click &#8220;Select Runtime&#8221; to open the runtimes panel</li>
<li>Your Firefox OS device should show up in the &#8220;WiFi Devices&#8221; section</li>
<li>A connection prompt will appear on device, choose &#8220;Scan&#8221; or &#8220;Scan and Remember&#8221;</li>
<li>Scan the QR code displayed in WebIDE</li>
</ol>


<p><img src="https://convolv.es/images/posts/webide-wifi-runtime.png" alt="WebIDE WiFi Runtimes" />
<img src="https://convolv.es/images/posts/webide-qr-code.png" alt="WebIDE Displays the QR Code" /></p>

<p>After scanning the QR code, the QR display should disappear and the &#8220;device&#8221;
icon in WebIDE will turn blue for &#8220;connected&#8221;.</p>

<p>You can then access all of your remote apps and browser tabs just as you can
today over USB.</p>

<h2>Technical Aside</h2>

<p>This process does not use ADB at all on the device, so if you find ADB
inconvenient while debugging or would rather not install ADB at all, then
WiFi debugging is the way to go.</p>

<p>By skipping ADB, we don&#8217;t have to worry about driver confusion, especially on
Windows and Linux.</p>

<h2>Supported Devices</h2>

<p>This feature should be supported on any Firefox OS device.  So far, I&#8217;ve tested
it on the Flame and Nexus 4.</p>

<h2>Known Issues</h2>

<p>The QR code scanner can be a bit frustrating at the moment, as real devices
appear to capture a very low resolution picture.  <a href="https://bugzil.la/1145772">Bug 1145772</a> aims
to improve this soon.  You should be able to scan with the Flame by trying a few
different orientations.  I would suggest using &#8220;Scan and Remember&#8221;, so that
scanning is only needed for the first connection.</p>

<p>If you find other issues while testing, please <a href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Firefox&amp;component=Developer%20Tools%3A%20WebIDE">file bugs</a> or contact me
on IRC.</p>

<h2>Acknowledgments</h2>

<p>This was quite a complex project, and many people provided advice and reviews
while working on this feature, including (in semi-random order):</p>

<ul>
<li>Brian Warner</li>
<li>Trevor Perrin</li>
<li>David Keeler</li>
<li>Honza Bambas</li>
<li>Patrick McManus</li>
<li>Jason Duell</li>
<li>Panos Astithas</li>
<li>Jan Keromnes</li>
<li>Alexandre Poirot</li>
<li>Paul Rouget</li>
<li>Paul Theriault</li>
</ul>


<p>I am probably forgetting others as well, so I apologize if you were omitted.</p>

<h2>What&#8217;s Next</h2>

<p>I&#8217;d like to add this ability for Firefox for Android next.  Thankfully, most of
the work done here can be reused there.</p>

<p>If there are features you&#8217;d like to see added, <a href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Firefox&amp;component=Developer%20Tools%3A%20WebIDE">file bugs</a> or contact the
team via <a href="https://wiki.mozilla.org/DevTools/GetInvolved#Communication">various channels</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Tabs with Firefox for Android]]></title>
    <link href="https://convolv.es/blog/2014/10/28/debug-fennec-tabs/"/>
    <updated>2014-10-28T16:08:00+00:00</updated>
    <id>https://convolv.es/blog/2014/10/28/debug-fennec-tabs</id>
    <content type="html"><![CDATA[<p>For quite a while, it has been possible to debug tabs on Firefox for Android
devices, but there were many steps involved, including manual port forwarding
from the terminal.</p>

<p>As I <a href="https://convolv.es/blog/2014/10/14/debug-fxos-tabs/">hinted</a> a few weeks ago, <a href="https://developer.mozilla.org/docs/Tools/WebIDE">WebIDE</a> would soon support connecting
to Firefox for Android via ADB Helper support, and that time is now!</p>

<h2>How to Use</h2>

<p>You&#8217;ll need to assemble the following bits and bobs:</p>

<ul>
<li>Firefox 36 (2014-10-25 or later)</li>
<li>ADB Helper 0.7.0 or later</li>
<li>Firefox for Android 35 or later</li>
</ul>


<p>Opening WebIDE for the first time should install ADB Helper if you don&#8217;t already
have it, but double-check it is the right version in the add-on manager.</p>

<p><img src="https://convolv.es/images/posts/fennec-usb-runtime.png" alt="Firefox for Android runtime appears" /></p>

<p>Inside WebIDE, you&#8217;ll see an entry for Firefox for Android in the Runtime menu.</p>

<p><img src="https://convolv.es/images/posts/fennec-tab-list.png" alt="Firefox for Android tab list" /></p>

<p>Once you select the runtime, tabs from Firefox for Android will be available in
the (now poorly labelled) apps menu on the left.</p>

<p><img src="https://convolv.es/images/posts/fennec-tab-toolbox.png" alt="Inspecting a tab in WebIDE" /></p>

<p>Choosing a tab will open up the DevTools toolbox for that tab.  You can also
toggle the toolbox via the &#8220;Pause&#8221; icon in the top toolbar.</p>

<p>If you would like to debug Firefox for Android&#8217;s system-level / chrome code,
instead of a specific tab, you can do that with the &#8220;Main Process&#8221; option.</p>

<h2>What&#8217;s Next</h2>

<p>We have even more connection UX improvements on the way, so I hope to have more
to share soon!</p>

<p>If there are features you&#8217;d like to see added, <a href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Firefox&amp;component=Developer%20Tools%3A%20WebIDE">file bugs</a> or contact the
team via <a href="https://wiki.mozilla.org/DevTools/GetInvolved#Communication">various channels</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevTools for Firefox OS browser tabs]]></title>
    <link href="https://convolv.es/blog/2014/10/14/debug-fxos-tabs/"/>
    <updated>2014-10-14T13:29:00+01:00</updated>
    <id>https://convolv.es/blog/2014/10/14/debug-fxos-tabs</id>
    <content type="html"><![CDATA[<p>We&#8217;ve had various tools for inspecting apps on remote devices for some time now,
but for a long time we&#8217;ve not had the same support for remote browser tabs.</p>

<p>To remedy this, <a href="https://developer.mozilla.org/docs/Tools/WebIDE">WebIDE</a> now supports inspecting browser tabs running on Firefox OS devices.</p>

<p><img src="https://convolv.es/images/posts/webide-tab.png" alt="Inspecting a tab in WebIDE" /></p>

<p>A few weeks back, WebIDE gained support for <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1009604">inspecting tabs</a> on the remote
device, but many of the likely suspects to connect to weren&#8217;t quite ready for
various reasons.</p>

<p>We&#8217;ve just <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=975084">landed</a> the necessary server-side bits for Firefox OS, so you
should be able try this out by updating your device to the next nightly build
after 2014-10-14.</p>

<h2>How to Use</h2>

<p>After connecting to your device in WebIDE, any open browser tabs will appear at
the bottom of WebIDE&#8217;s project list.</p>

<p><img src="https://convolv.es/images/posts/webide-tab-list.png" alt="Browser tab list in WebIDE" /></p>

<p>The toolbox should open automatically after choosing a tab.  You can also toggle
the toolbox via the &#8220;Pause&#8221; icon in the top toolbar.</p>

<h2>What&#8217;s Next</h2>

<p>We&#8217;re planning to make this work for Firefox for Android as well.  Much of
that work is already done, so I am hopeful that it will be available soon.</p>

<p>If there are features you&#8217;d like to see added, <a href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Firefox&amp;component=Developer%20Tools%3A%20WebIDE">file bugs</a> or contact the
team via <a href="https://wiki.mozilla.org/DevTools/GetInvolved#Communication">various channels</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebIDE enabled in Nightly]]></title>
    <link href="https://convolv.es/blog/2014/08/18/webide-enabled/"/>
    <updated>2014-08-18T10:44:00+01:00</updated>
    <id>https://convolv.es/blog/2014/08/18/webide-enabled</id>
    <content type="html"><![CDATA[<p>I am excited to announce that <a href="https://developer.mozilla.org/docs/Tools/WebIDE">WebIDE</a> is now enabled by default in Nightly
(Firefox 34)!  Everyone on the App Tools team has been working hard to polish
this new tool that we originally <a href="https://hacks.mozilla.org/2014/06/webide-lands-in-nightly/">announced</a> back in June.</p>

<iframe src="https://convolv.es//www.youtube-nocookie.com/embed/n8c34wk4OnY?rel=0" allowfullscreen="" frameborder="0" height="315" width="560"></iframe>


<h2>Features</h2>

<p>While the previous App Manager tool was great, that tool&#8217;s UX held us
back when trying support more complex workflows.  With the redesign into WebIDE,
we&#8217;ve already been able to add:</p>

<ul>
<li>Project Editing

<ul>
<li>Great for getting started without worrying about an external editor</li>
</ul>
</li>
<li>Project Templates

<ul>
<li>Easy to focus on content from the start by using a template</li>
</ul>
</li>
<li>Improved DevTools Toolbox integration

<ul>
<li>Many UX issues arose from the non-standard way that App Manager used the
DevTools</li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/docs/Tools/WebIDE/Monitor">Monitor</a>

<ul>
<li>Live memory graphs help diagnose performance issues</li>
</ul>
</li>
</ul>


<p><img src="https://thefiletree.com/jan/shots/monitor/monitor.png"/></p>

<h2>Transition</h2>

<p>All projects you may have created previously in the App Manager are also
available in WebIDE.</p>

<p>While the App Manager is now hidden, it&#8217;s accessible for now at
<code>about:app-manager</code>.  We do intend to remove it entirely in the future, so
it&#8217;s best to start using WebIDE today.  If you find any issues, please <a href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Firefox&amp;component=Developer%20Tools%3A%20WebIDE">file bugs</a>!</p>

<h2>What&#8217;s Next</h2>

<p>Looking ahead, we have many more exciting things planned for WebIDE, such as:</p>

<ul>
<li>Command line integration</li>
<li>Improved support for app frameworks like Cordova</li>
<li>Validation that matches the Firefox Marketplace</li>
</ul>


<p>If there are features you&#8217;d like to see added, <a href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Firefox&amp;component=Developer%20Tools%3A%20WebIDE">file bugs</a> or contact the
team via <a href="https://wiki.mozilla.org/DevTools/GetInvolved#Communication">various channels</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mozilla]]></title>
    <link href="https://convolv.es/blog/2013/08/25/mozilla/"/>
    <updated>2013-08-25T01:27:00+01:00</updated>
    <id>https://convolv.es/blog/2013/08/25/mozilla</id>
    <content type="html"><![CDATA[<p>In my <a href="https://convolv.es/blog/2013/02/17/into-the-open/">last post</a> (back in February&#8230;), I mentioned I was spending a lot of
time on the side working on the developer tools in web browsers, particularly
Firefox.  I find that Mozilla&#8217;s values, which truly put the user first, are
something I agree with wholeheartedly.  Mozilla is in a unique position in this
way, since all the other browsers are made by companies that, at the end of day,
are looking to make money to appease their shareholders.  Mozilla&#8217;s values are
even more important to emphasize these days with the various forms of
governmental spying that has been revealed in the last few months.</p>

<p>With that context, hopefully you can get an idea of how excited I am to say that
this past Monday was my first day as a Mozilla employee, working on the Firefox
Developer Tools team!</p>

<p>I am currently in Paris ramping up with the team for two weeks.  After the first
week, I am humbled to be able to say I am a part of this organization.  There
are so many people smarter than me here, and I am thrilled to have the
opportunity to work with them.  I know we will accomplish great things together.</p>

<p>There is so much potential in the web developer tools space.  Every developer
has their own workflow, favorite set of frameworks and tools, and new platform
technologies and techniques are coming out at a rapid pace.  While part of my
job is certainly to help make all of this more efficient, there is a lot of room
to shake things up by looking towards the future of web development and the
tools that people don&#8217;t even know they need.</p>

<p>It&#8217;s going to be a blast! Hopefully I&#8217;ll have to some fun things to share.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Into the Open]]></title>
    <link href="https://convolv.es/blog/2013/02/17/into-the-open/"/>
    <updated>2013-02-17T22:52:00+00:00</updated>
    <id>https://convolv.es/blog/2013/02/17/into-the-open</id>
    <content type="html"><![CDATA[<p>I&#8217;m excited to start to focusing what time I do have on the side towards open
source projects.  I&#8217;m always on the lookout for good projects to help out with,
but these days I always seem to come back to web browsers.</p>

<p>In particular, I really enjoy working on tools that improve the lives of other
every day.  In that vein, I&#8217;d like to focus on improvements to the developer
tools in browsers today, though they are vastly better today than even a few
years ago.</p>

<p>The main open source options as far as web browsers go are Chrome / Chromium and
the various Mozilla projects, like Firefox. Near the end of 2011, I started
ramping up on the Chromium project, mainly because Chrome is the main browser I
used then.</p>

<p>However, now that Opera has decided to switch to Chromium for future versions of
their browser, I&#8217;ve been reminded that Mozilla is the only party in the web
development game that truly seems to be doing their best to fight for the user.
The main reason I stopped using Firefox was due to Chrome&#8217;s impressive developer
tools, so I&#8217;d like to help improve Firefox tools to bring them up to the level
we&#8217;ve now come to expect and beyond.</p>

<p>Likely I&#8217;ll dabble in both Chromium and Firefox, but no matter what it should be
an exciting time ahead!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Materials, Maps, and Surfacing]]></title>
    <link href="https://convolv.es/blog/2012/10/06/materials/"/>
    <updated>2012-10-06T15:13:00+01:00</updated>
    <id>https://convolv.es/blog/2012/10/06/materials</id>
    <content type="html"><![CDATA[<h3>Overview</h3>

<p>For this <a href="http://viscom3d.blogspot.com/2012/09/materials-maps-and-surfacing.html">assignment</a>, we learned how to apply materials to the objects
we&#8217;ve been creating.  There are many, many different ways to construct a
material that you apply to 3D object.  They can be procedurally generated, they
can pull from textures (or maps) you create, and you can manually tune many
parameters as well.</p>

<p>Maps are a great way to control the appearance of an object because you can make
something resemble a real object quite quickly by just taking a picture and
doing a bit of editing.</p>

<h3>Environment</h3>

<p>For the environment, I used a variety of wood textures as maps to give the huts
a rustic feel.  The door particularly look much more believable now.  Also, the
islands look much less like strange brains now there&#8217;s a grassy appearance
applied, instead of just the flat green.</p>

<h3>Robot</h3>

<p>For the robot, I gave him a weathered, rusty metal appearance that seems to tie
in well with his supportive / charming look. Old, but still functioning just
fine.</p>

<p>The eyes and mouth have a bit of an ethereal / floating feel to them thanks to
the transparency.</p>

<p>It was fun to experiment with the various parameters and material types that can
give a metallic appearance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Splines, Loft, and Lathe]]></title>
    <link href="https://convolv.es/blog/2012/09/29/splines/"/>
    <updated>2012-09-29T08:17:00+01:00</updated>
    <id>https://convolv.es/blog/2012/09/29/splines</id>
    <content type="html"><![CDATA[<h3>Overview</h3>

<p>For this <a href="http://viscom3d.blogspot.com/2012/09/spline-modeling-and-compound-objects.html">assignment</a>, we learned a few new techniques, namely how to make
use of 2D shapes to give more detail to our models.  Beyond simple shapes like
circles and squares is the very flexible spline, which gives you a lot of
control over how a line is drawn, while still be purely analytical.</p>

<h3>Shapes and Splines</h3>

<p>For part of the homework, we added some shapes and splines to our existing
models.  Below you can see the island huts from before, but with a few
additional decorations, such as some scary wiring / branches, as well as door
knobs and roof ornaments.</p>

<h3>Lathe and Loft</h3>

<p>We also learned how to take 2D paths and morph them into 3D shapes in several
interesting ways.  You can use lathe to revolve the path around an axis, similar
to a torus.</p>

<p>I used this technique to create a pot, an inflatable pool, and a spyglass.</p>

<p>We also learned about loft, which will take a shape and replicate it in 3D
across whatever path you define.  This is another very powerful feature, with
many ways you can customize and tune its behavior.</p>

<p>I made several tracks and other shapes using this process:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Game with Unity]]></title>
    <link href="https://convolv.es/blog/2012/09/22/basic-game-with-unity/"/>
    <updated>2012-09-22T04:42:00+01:00</updated>
    <id>https://convolv.es/blog/2012/09/22/basic-game-with-unity</id>
    <content type="html"><![CDATA[<h3>Overview</h3>

<p>For this week&#8217;s <a href="http://viscom3d.blogspot.com/2012/09/unity-101.html">assignment</a>, we jumped out of the normal curriculum and
went straight to using a game engine with our models from last time.  We added a
few common elements, like terrain and fog.</p>

<h3>Unity</h3>

<p>Unity is a lot of fun to work with! It&#8217;s quite easy to assemble something pretty
cool, and yet it is also has a lot of depth to allow you to refine details. I
can definitely see myself working with this down the road, especially given the
wide multi-platform support.</p>

<h3>Game Level</h3>

<p>For the level itself, I modified the environment to remove the static water I
made before and surround the island with mountainous terrain.  Then I added the
animated water to get back to the original environment idea.</p>

<p>From there, I added some basic lighting and fog to match the skybox I chose.  It
was actually a bit tricky to map a collider to the island huts.  For now I used
spheres, but perhaps I&#8217;ll need to flatten those into a single mesh for Unity to
represent them accurately.</p>

<p>There&#8217;s definitely room for improvement along many aspects, but it&#8217;s really
exciting to see something playable come together so quickly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3D Modeling: Robot in the Ruins]]></title>
    <link href="https://convolv.es/blog/2012/09/15/3d-modeling-robot-in-the-ruins/"/>
    <updated>2012-09-15T05:43:00+01:00</updated>
    <id>https://convolv.es/blog/2012/09/15/3d-modeling-robot-in-the-ruins</id>
    <content type="html"><![CDATA[<h3>Overview</h3>

<p>For our <a href="http://viscom3d.blogspot.com/2012/01/robot-in-ruins.html">first assignment</a>, we had to build a robot and an environment for the it to inhabit.</p>

<h3>Robot</h3>

<p>The robot had to use exactly 1000 polygons. I chose to create a kind of
transport robot with a cute appearance. I used an elongated egg shape, and gave
it two propellers to maneuver. The robot is shown at an angle to suggest
movement.  The propellers were fun to construct, especially with the primitives,
since you have to think of clever ways to build what want from just a few
shapes. With two shapes and a few filters, I arrived at a convincing version of
propeller blades.</p>

<h3>Environment</h3>

<p>For the environment, we had a budget of 10,000 polygons. I thought it would be
fun to create a water / island environment. However, even a poor simulation of
water quickly eats up a lot of polygons!</p>

<p>My thoughts here were that several of the robots might be used to transport
various items between the islands as needed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3D Modeling and Rendering 1]]></title>
    <link href="https://convolv.es/blog/2012/09/07/3d-modeling-and-rendering-1/"/>
    <updated>2012-09-07T23:20:00+01:00</updated>
    <id>https://convolv.es/blog/2012/09/07/3d-modeling-and-rendering-1</id>
    <content type="html"><![CDATA[<p>I&#8217;ve started taking classes at ACC to learn some visual design skills and
generally extend my knowledge of how games and other media are built.</p>

<p>The first one is this 3D modeling class, and I&#8217;ll be maintaining a portfolio of
my work as this class goes on. I&#8217;m excited to see what I can come up with!
Undoubtedly my work won&#8217;t win too many awards, but hopefully I can pick up the
principles and develop them further over time.</p>

<p>I think this will also give me a better understanding of the thought process that
design and creative teams go through at the various places I&#8217;ve worked now and in
the past.</p>

<p>Anyway, should be fun! :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exciting new blog thing]]></title>
    <link href="https://convolv.es/blog/2012/05/07/exciting-new-blog-thing/"/>
    <updated>2012-05-07T23:28:00+01:00</updated>
    <id>https://convolv.es/blog/2012/05/07/exciting-new-blog-thing</id>
    <content type="html"><![CDATA[<p>&#8230;to replace what exactly? My LiveJournal from college&#8230;? I&#8217;ve never been great at maintaining any kind of journal / blog / whatever, but <a href="http://octopress.org">Octopress</a> just looks like so much fun, so I had to give it a shot. Tonight I finally ripped the default theme up a bit to create a more minimalist look, which I think turned out quite well.</p>

<p>I&#8217;m hoping to start talking about all the crazy tech projects I&#8217;ve got brewing in my mind that I&#8217;ll one day sit down and make progress on, along with a few bits of life, work, and everything else mixed in.</p>

<p>Even writing this tiny thing is more than I&#8217;ve done in ages. Any guesses how long until the next one?</p>
]]></content>
  </entry>
  
</feed>
